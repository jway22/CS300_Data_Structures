// CS300_Final.cpp
// Jon Way

#include <iostream>
#include <vector>
#include <fstream>
#include <string>


using namespace std;

//============================================================================
// Global definitions visible to all methods and classes
//============================================================================

struct Course {
    string courseId;
    string courseTitle;
    vector<string> coursePrereq;

};

struct Node {
    Course course;
    Node* left;
    Node* right;

    // default constructor
    Node() {
        left = nullptr;
        right = nullptr;
    }

    // initialize with a course
    Node(Course aCourse) :
        Node() {
        course = aCourse;
    }
};

//============================================================================
// Binary Search Tree class definition
//============================================================================

class BinarySearchTree {

private:
    Node* root;

    void addNode(Node* node, Course course);
    void inOrder(Node* node);
    
public:
    BinarySearchTree();
    void InOrder();
    void Insert(Course course);
    void printAllCourses();
    void printCourse(string courseId);

    Course Search(string courseId);
};

/**
 * Default constructor
 */
BinarySearchTree::BinarySearchTree() {
    root = nullptr;
}

/**
 * Add a course to some node (recursive)
 *
 * @param node Current node in tree
 * @param Course course to be added
 */
void BinarySearchTree::addNode(Node* node, Course course) {

    // if node is larger then add to left
    if (course.courseId < node->course.courseId) {
        // if no left node
        if (node->left == nullptr) {
            // this node becomes left
            node->left = new Node(course);
        }
        // else recurse down the left node
        else {
            addNode(node->left, course);
        }
    }
    // else go right
    else {
        // if no right node
        if (node->right == nullptr) {
            // this node becomes right
            node->right = new Node(course);
        }
        // else recurse down the right node
        else {
            addNode(node->right, course);
        }
    }
}

/**
 * Traverse the tree in order
 */
void BinarySearchTree::InOrder() {
    // call inOrder fuction and pass root
    inOrder(root);
}

/**
 * Insert a course
 */
void BinarySearchTree::Insert(Course course) {
    // if root equal to null ptr
    if (root == nullptr) {
        // root is equal to new node course
        root = new Node(course);
    }
    else { // add Node root and course
        addNode(root, course);
    }
}

Course BinarySearchTree::Search(string courseId) {
    // set current node equal to root
    Node* current = root;

    // keep looping downwards until bottom reached or matching courseId found
    while (current != nullptr) {
        // if match found, return current courseId
        if (current->course.courseId == courseId) {
            return current->course;
        }
        // if courseId is smaller than current node then traverse left
        else if (courseId < current->course.courseId) {
            current = current->left;
        }
        // else larger so traverse right
        else {
            current = current->right;
        }
    }

    Course course;
    return course;
}

void BinarySearchTree::inOrder(Node* node) {
    //if node is not equal to null ptr
    if (node != nullptr) {
        //InOrder left
        inOrder(node->left);

        //output courseId and courseTitle
        cout << node->course.courseId << ": " << node->course.courseTitle << endl;

        //InOder right
        inOrder(node->right);
    }
}

void BinarySearchTree::printAllCourses() {
    // call inOrder with root passed as parameter
    inOrder(root);
}

void BinarySearchTree::printCourse(string courseId) {
    // Search for course matching courseId
    Course course = Search(courseId);

    // if Search returned a course
    if (course.courseId.length() != 0) {
        // print Id and Title
        cout << course.courseId << ": " << course.courseTitle << endl;
        // if course has prerequisites, print them
        if (course.coursePrereq.size() > 0) {
            cout << "Prerequisites: ";
            for (unsigned int i = 0; i < course.coursePrereq.size(); i++) {
                if (i < course.coursePrereq.size() - 1) {
                    cout << course.coursePrereq[i] << ", ";
                }
                else {
                    cout << course.coursePrereq[i] << endl;
                }
            }
        }
    }
    else { // no course was found with matching Id
        cout << "Course does not exist in program." << endl;
    }
    
    cout << endl;
}

void loadCourses(string fileName, BinarySearchTree* bst) {
    ifstream myFile(fileName);
    string lineText;
    
    
    // read each line, store in lineText
    while (getline(myFile, lineText)) {
        size_t pos = 0;
        string delim = ",";
        string token;
        vector<string> lineItems;
        Course course;

        // parse stored line and create vector of each item of course info
        while ((pos = lineText.find(delim)) != std::string::npos) {
            token = lineText.substr(0, pos);
            lineItems.push_back(token);
            lineText.erase(0, pos + delim.length());
        }
        // add last item of lineText to vector
        token = lineText;
        lineItems.push_back(token);

        // store course info into new course object
        for (unsigned int i = 0; i < lineItems.size(); i++) {
            if (i == 0) {
                course.courseId = lineItems[i];
            }
            else if (i == 1) {
                course.courseTitle = lineItems[i];
            }
            else if (i > 1) {
                course.coursePrereq.push_back(lineItems[i]);
            }
        }

        // insert course into BST
        bst->Insert(course);

    }
}

/*
* main() method
*/
int main() {
    // Define a binary search tree to hold all bids
    BinarySearchTree* bst;
    bst = new BinarySearchTree();
    Course course;
    string fileName;

    int choice = 0;
    while (choice != 9) {
        cout << "Menu:" << endl;
        cout << "  1. Load Courses" << endl;
        cout << "  2. Print All Courses" << endl;
        cout << "  3. Print Course" << endl;
        cout << "  9. Exit" << endl;
        cout << "Enter choice: ";
        cin >> choice;
        cout << endl;

        switch (choice) {

        case 1:
            cout << "Enter file name: ";
            cin >> fileName;
            loadCourses(fileName, bst);
            break;

        case 2:
            bst->printAllCourses();
            break;

        case 3:
            cout << "What course would you like information on?" << endl;
            string userInput;
            cin >> userInput;
            cout << endl;
            bst->printCourse(userInput);
            break;
        }

        cout << endl;
    }

    cout << "Thank you for using" << endl;
    cout << "ABCU's Academic Advising Portal" << endl;
    cout << "Goodbye!" << endl;

}
